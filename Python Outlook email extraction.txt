# script to download attachment from Daily InHomeReport
# converts the file from xls to csv
# RUN THIS FIRST THEN bigQueryTest
import win32com.client
import datetime as dt
import pandas as pd
import xlrd
import os

# --------------------------- accessing outlook ---------------------------
outlook = win32com.client.Dispatch("Outlook.Application")
mapi = outlook.GetNamespace("MAPI")
email = ''

# --------------------------- creating directory to save files and pull from ---------------------------
#storepath = r"L:\Son Nguyen\Python\\"
cevaFolder =  r"L:\Son Nguyen\CEVA daily InHome\\"
inhomeFolder = mapi.Folders["snguyen@zulily.com"].Folders["InHome"].Folders["InHome Reports"]
projectid = "zulilyfulfillment"
val_date = dt.date.today()
# --------------------------- email characteristics ---------------------------
messages = inhomeFolder.Items
sortMessages = messages.Sort("[ReceivedTime]",False)
message = messages.GetLast()
timeCreation = dt.datetime.strptime(str(message.CreationTime),'%m/%d/%y %H:%M:%S')
convert = dt.datetime.date(timeCreation)
substring = "Show References:	 Y"

# --------------------------- validating most recent email by validating date and email ---------------------------
def identify_email(msg):
    bodymsg = msg.Body
    email = msg
    if val_date == convert:
        if bodymsg.find(substring) != -1: # -1 means that the function was not able to find the string
            print "Correct email"
            return email
        else:
            print "No Match..Retrying..."
            email = messages.GetPrevious()
            return identify_email(email)
    else:
        print "recent email does not match today's date"
        email = messages.GetPrevious()
        exit()
        #return identify_email(email)
message = identify_email(message)
#print message.Body
# --------------------------- taking the attachment from recent email ---------------------------
attachments = message.Attachments
for attachment in attachments:
    if attachment.FileName.endswith('.xls'):
        try:
            attachment.SaveAsFile(cevaFolder+"backup\InHomeReport_"+str(convert)+".xls")
            print "downloaded current Attachment Report - " + str(convert)
            print "Directory: "+cevaFolder+"backup\InHomeReport_"+str(convert)+".xls"
        except:
            print "no attached file"
            quit()

# --------------------------- converting the file to csv ---------------------------
read_InHomeReport = pd.read_excel(cevaFolder+"backup\InHomeReport_"+str(convert)+".xls",sheet_name=0)\
    .to_csv(path_or_buf=cevaFolder+"backup\InHomeReport_"+str(convert)+".csv", index=False,encoding="utf-8-sig")
inHomeReport_csv = pd.read_csv(filepath_or_buffer= cevaFolder+"backup\InHomeReport_"+str(convert)+".csv")
fixingColumns = inHomeReport_csv.columns = \
    ['House_Bill','Origin','Orig_Metro','Orig_Country','Destin','Destin_Metro','Destin_Country','HB_Create_Ship_Date',
    'HB_Create_Ship_Time','Estimated_Delivery',	'Service_Level','PaymentType',
# Shipper's info
    'Shipper_Name','Shipper_Address_1','Shipper_Address_2','Shipper_Address_3','Ship_City','ShipState','ShipZip','ShipCtry',
# Customer's info
     'Consignee_Name','Consignee_Address_1','Consignee_Address_2','Consignee_Address_3','Cons_City','Cons_State','Cons_Zip','Cons_Ctry',
# billing info
    'Bill_To','Bill_To_Address_1','Bill_To_Address_2','Bill_To_Address_3','Bill_To_City','Bill_To_State','Bill_To_Zip','Bill_To_Ctry',
     'Customer',
# shipment info
     'Pieces','Actual_Weight','Charge_Weight','Type','Charges','Currency','Commodity','Dom_Intl',
# shipment activity
     'Status_Code','Status_Description','Status_Date','Time','Signature','Exception_Code',
# shipment reference fields
    'Shippers_Reference','Consignee_Reference',	'Other_Reference','All_consignee_References']

# --------------------------- save with new column names ---------------------------
#inHomeReport_main = inHomeReport_csv.to_csv(path_or_buf=cevaFolder+"backup\InHomeReport_"+str(convert)+".csv", index=False,encoding="utf-8-sig")
# --------------------------- joining main table with tmp table --------------------------- #
#main_table = pd.read_csv(filepath_or_buffer=cevaFolder+"Master_InHomeReport.csv", sep=",")

# --------------------------- grabbing the table from gbq ---------------------------
main_table = pd.read_gbq(
    """
    SELECT *
    FROM [zulilyfulfillment:sandbox.CEVA_tracking_activity]
    """,
    projectid,
    reauth=False)

tmp_table = pd.read_csv(filepath_or_buffer=cevaFolder+"backup\InHomeReport_"+str(convert)+".csv", sep=",")
columnsFixing = tmp_table.columns = \
    ['House_Bill','Origin','Orig_Metro','Orig_Country','Destin','Destin_Metro','Destin_Country','HB_Create_Ship_Date',
    'HB_Create_Ship_Time','Estimated_Delivery',	'Service_Level','PaymentType',
# Shipper's info
    'Shipper_Name','Shipper_Address_1','Shipper_Address_2','Shipper_Address_3','Ship_City','ShipState','ShipZip','ShipCtry',
# Customer's info
     'Consignee_Name','Consignee_Address_1','Consignee_Address_2','Consignee_Address_3','Cons_City','Cons_State','Cons_Zip','Cons_Ctry',
# billing info
    'Bill_To','Bill_To_Address_1','Bill_To_Address_2','Bill_To_Address_3','Bill_To_City','Bill_To_State','Bill_To_Zip','Bill_To_Ctry',
     'Customer',
# shipment info
     'Pieces','Actual_Weight','Charge_Weight','Type','Charges','Currency','Commodity','Dom_Intl',
# shipment activity
     'Status_Code','Status_Description','Status_Date','Time','Signature','Exception_Code',
# shipment reference fields
    'Shippers_Reference','Consignee_Reference',	'Other_Reference','All_consignee_References']

# --------------------------- concat-ing tables ---------------------------
joinedTable = pd.concat([main_table, tmp_table])
print "merged " + str(convert) + " file with the master file."

cleanup = joinedTable.drop_duplicates().sort_values("House_Bill")
print "Cleaning up duplicates..."
# --------------------------- saving file ---------------------------
os.remove(cevaFolder+"backup\InHomeReport_"+str(convert)+".xls")

# --------------------------- saving backup Master file ---------------------------
print "Saving Backup File"
backup = main_table.to_csv(path_or_buf=cevaFolder + "Master_InHomeReportBackup.csv",index=False, encoding="utf-8-sig")
print "Saving Master File..."
mainInHomeReport = cleanup.to_csv(path_or_buf=cevaFolder + "Master_InHomeReport.csv",index=False, encoding="utf-8-sig")
print "Script finished"
